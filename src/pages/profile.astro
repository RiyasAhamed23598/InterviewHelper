---
import Layout from '../layouts/Layout.astro';
import QuizDashboard from '../components/QuizDashboard';
---

<Layout title="Profile - Interview Helper" description="Your Interview Helper profile">
  <div class="max-w-3xl mx-auto p-4">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md">
      <form id="profile-form" class="p-6 space-y-4">
        <div id="error-message" class="hidden p-4 bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-400 rounded-lg"></div>
        <div id="success-message" class="hidden p-4 bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-400 rounded-lg"></div>

        <div class="space-y-4">
          <div>
            <label for="name" class="block mb-1 text-sm font-medium text-gray-700 dark:text-gray-300">Name</label>
            <input
              type="text"
              id="name"
              name="name"
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
              placeholder="Your name"
            />
          </div>
          <div>
            <label for="username" class="block mb-1 text-sm font-medium text-gray-700 dark:text-gray-300">Username</label>
            <input
              type="text"
              id="username"
              name="username"
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
              placeholder="Username"
            />
          </div>
          <div>
            <label for="email" class="block mb-1 text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
            <input
              type="email"
              id="email"
              name="email"
              disabled
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white cursor-not-allowed"
            />
          </div>
        </div>

        <div class="pt-4">
          <button
            type="submit"
            class="w-full px-4 py-2 text-white rounded-lg bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
          >
            Save Changes
          </button>
        </div>
      </form>
    </div>
    
    <div class="mt-8">
      <h2 class="text-2xl font-bold mb-4 text-gray-800 dark:text-white">Your Quiz Performance</h2>
      <QuizDashboard client:only="react" />
    </div>
  </div>
</Layout>

<script>
  const API_URL = import.meta.env.PROD 
    ? 'https://api.interviewhelper.in/api' 
    : (import.meta.env.PUBLIC_API_URL || 'http://localhost:5500/api');

  function showMessage(type: 'success' | 'error', message: string) {
    const successEl = document.getElementById('success-message');
    const errorEl = document.getElementById('error-message');
    
    if (successEl && errorEl) {
      if (type === 'success') {
        successEl.textContent = message;
        successEl.classList.remove('hidden');
        errorEl.classList.add('hidden');
        setTimeout(() => successEl.classList.add('hidden'), 5000);
      } else {
        errorEl.textContent = message;
        errorEl.classList.remove('hidden');
        successEl.classList.add('hidden');
      }
    }
  }

  function updateProfileDisplay(user: any) {
    const displayName = document.getElementById('display-name');
    const userEmail = document.getElementById('user-email');
    const userInitials = document.getElementById('user-initials');
    
    if (displayName) displayName.textContent = user.name || user.username || user.email.split('@')[0];
    if (userEmail) userEmail.textContent = user.email;
    if (userInitials) {
      userInitials.textContent = (user.name || user.email)
        .split(' ')
        .map((n: string) => n[0])
        .join('')
        .toUpperCase()
        .substring(0, 2);
    }
  }

  async function initializeProfile() {
    try {
      const accessToken = localStorage.getItem('interviewhelper:accessToken');
      if (!accessToken) {
        window.location.href = '/login';
        return;
      }

      const response = await fetch(`${API_URL}/auth/me`, {
        headers: { 'Authorization': `Bearer ${accessToken}` }
      });

      if (!response.ok) throw new Error('Failed to fetch user data');

      const { user } = await response.json();
      
      const nameInput = document.getElementById('name') as HTMLInputElement;
      const usernameInput = document.getElementById('username') as HTMLInputElement;
      const emailInput = document.getElementById('email') as HTMLInputElement;
      
      if (nameInput) nameInput.value = user.name || '';
      if (usernameInput) usernameInput.value = user.username || '';
      if (emailInput) emailInput.value = user.email || '';
      
      updateProfileDisplay(user);
    } catch (error) {
      console.error('Error loading profile:', error);
      showMessage('error', 'Failed to load profile data');
    }
  }

  document.getElementById('profile-form')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    try {
      const accessToken = localStorage.getItem('interviewhelper:accessToken');
      if (!accessToken) {
        window.location.href = '/login';
        return;
      }
      
      const formData = new FormData(e.target as HTMLFormElement);
      const data = {
        name: formData.get('name'),
        username: formData.get('username')
      };

      const userObj = JSON.parse(localStorage.getItem('interviewhelper:user') || '{}');
      
      const response = await fetch(`${API_URL}/users/${userObj.userId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${accessToken}`
        },
        body: JSON.stringify(data)
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to update profile');
      }
      const userResponse = await response.json();
      const { email, name, username } = userResponse;
      updateProfileDisplay({ email, name, username });
      localStorage.setItem('interviewhelper:user', JSON.stringify(userResponse));
      showMessage('success', 'Profile updated successfully');
    } catch (error) {
      console.error('Error updating profile:', error);
      showMessage('error', error instanceof Error ? error.message : 'Failed to update profile');
    }
  });

  document.addEventListener('DOMContentLoaded', initializeProfile);
</script>
