---
const currentPath = Astro.url.pathname;

const menuItems = [
  {
    title: "Getting Started",
    icon: "fas fa-rocket",
    items: [
      { title: "Introduction", path: "/introduction" },
      { title: "Getting Started", path: "/getting-started" },
    ],
  },
  {
    title: "Guides",
    icon: "fas fa-book",
    items: [
      {
        title: "Implementing Pagefind Search",
        path: "/guides/pagefind-search",
      },
    ],
  },
  {
    title: "Frontend Development",
    icon: "fas fa-desktop",
    items: [
      {
        title: "Angular",
        icon: "fab fa-angular",
        items: [
          {
            title: "Basic Questions",
            items: [
              {
                title:
                  "What is Angular, and how is it different from AngularJS?",
                path: "/angular/what-is-angular",
              },
              {
                title: "Key features of Angular?",
                path: "/angular/key-features",
              },
              {
                title: "Explain Angular’s architecture.",
                path: "/angular/architecture",
              },
              {
                title: "Explain Angular’s new architecture.",
                path: "/angular/modern-architecture",
              },
              {
                title: "Purpose of TypeScript in Angular?",
                path: "/angular/typescript-purpose",
              },
              {
                title: "Components in Angular?",
                path: "/angular/components",
              },
              {
                title: "Data binding in Angular?",
                path: "/angular/data-binding",
              },
              {
                title: "What is a module in Angular?",
                path: "/angular/module",
              },
              {
                title: "What is Standalone Components?",
                path: "/angular/standalone-components",
              },
              {
                title: "Signals in angular?",
                path: "/angular/signals",
              },
              {
                title: "Angular CLI?",
                path: "/angular/angular-cli",
              },
              {
                title: "Decorators in Angular?",
                path: "/angular/decorators",
              },
              {
                title: "Directives in Angular?",
                path: "/angular/directives",
              },
            ],
          },
          {
            title: "Intermediate Questions",
            items: [
              {
                title: "What is angular's new control flow?",
                path: "/angular/control-flow",
              },
              {
                title: "What are @Input() and @Output() decorators?",
                path: "/angular/input-output",
              },
              {
                title: "Angular Pipes?",
                path: "/angular/pipes",
              },
              {
                title:
                  "What is the difference between Template-Driven Forms and Reactive Forms in Angular?",
                path: "/angular/forms",
              },
              {
                title:
                  "What are lifecycle hooks in Angular? Explain ngOnInit and ngOnDestroy",
                path: "/angular/lifecycle-hooks",
              },
              {
                title: "How is dependency injection implemented in Angular?",
                path: "/angular/dependency-injection",
              },
              {
                title: "What are Angular services, and how do you create one?",
                path: "/angular/services",
              },
              {
                title: "What is RxJS, and how is it used in Angular?",
                path: "/angular/rxjs",
              },
              {
                title:
                  "What are Observables, and how are they different from Promises?",
                path: "/angular/observables",
              },
            ],
          },
          {
            title: "Advanced Questions",
            items: [
              {
                title: "Explain about Content Projection in Angular?",
                path: "/angular/advanced/content-projection",
              },
              {
                title: "How do you manage state in an Angular application?",
                path: "/angular/state-management",
              },
              {
                title:
                  "What is the purpose of ViewChild and ContentChild in Angular?",
                path: "/angular/viewchild-contentchild",
              },
              {
                title:
                  "How do you optimize an Angular application for better performance?",
                path: "/angular/performance",
              },
              {
                title: "What is AOT (Ahead-of-Time) Compilation in Angular?",
                path: "/angular/aot-compilation",
              },
              {
                title:
                  "What is the difference between constructor and ngOnInit in a component?",
                path: "/angular/constructor-vs-ngoninit",
              },
              {
                title:
                  "What are Angular animations, and how are they implemented?",
                path: "/angular/animations",
              },
              {
                title:
                  "How does Angular handle error management and debugging?",
                path: "/angular/error-management",
              },
            ],
          },
          {
            title: "Scenario-Based Questions",
            items: [
              {
                title: "How would you debug a slow Angular app?",
                path: "/angular/debugging",
              },
              {
                title:
                  "How do you secure an Angular application from vulnerabilities like XSS and CSRF?",
                path: "/angular/security",
              },
              {
                title:
                  "How do you handle large datasets in Angular without compromising performance?",
                path: "/angular/large-datasets",
              },
              {
                title:
                  "Explain how you would implement dynamic forms in Angular?",
                path: "/angular/dynamic-forms",
              },
              {
                title:
                  "How do you handle multiple API calls simultaneously in Angular?",
                path: "/angular/multiple-api-calls",
              },
              {
                title:
                  "What would you do if a component’s ngOnInit is not executing?",
                path: "/angular/ngoninit-issues",
              },
              {
                title: "How would you share data between sibling components?",
                path: "/angular/component-communication",
              },
              {
                title:
                  "How do you ensure a component only loads after data is fetched from an API?",
                path: "/angular/component-lazy-load",
              },
              {
                title:
                  "What steps would you take to migrate an AngularJS project to Angular?",
                path: "/angular/migration-angularjs",
              },
            ],
          },
          {
            title: "Community Q&A",
            items: [
              {
                title: "Explain how do you setup the Routing in Angular?",
                path: "/angular/community/routing-setup",
              },
              {
                title:
                  "Describe how do you configure and access Route Parameters?",
                path: "/angular/community/routing-parameters",
              },
              {
                title:
                  "Explain how can you achieve page navigation in Angular?",
                path: "/angular/community/routing-navigation",
              },
              {
                title: "Explain the concept of lazy loading in Angular?",
                path: "/angular/community/routing-lazy-loading",
              },
              {
                title:
                  "Explain the difference between forRoot and forChild in Angular?",
                path: "/angular/community/routing-forroot-vs-forchild",
              },

              {
                title: "What are Angular Guards? Explain the different types.",
                path: "/angular/community/routing-guards-traditional",
              },
              {
                title:
                  "Can you explain what do understand by this route configuration in Angular?",
                path: "/angular/community/scenario/route-configuration",
              },
            ],
          },
        ],
      },

      {
        title: "React",
        icon: "fab fa-react",
        items: [
          {
            title: "Core Concepts",
            items: [
              { title: "Components & Props", path: "/react/components-props" },
              { title: "Hooks in Depth", path: "/react/hooks" },
              { title: "Context API", path: "/react/context-api" },
            ],
          },
          {
            title: "Advanced Patterns",
            items: [
              {
                title: "Performance Patterns",
                path: "/react/performance-patterns",
              },
              { title: "Custom Hooks", path: "/react/custom-hooks" },
              { title: "Error Boundaries", path: "/react/error-boundaries" },
            ],
          },
        ],
      },
    ],
  },
  {
    title: "Backend Development",
    icon: "fas fa-server",
    items: [
      {
        title: ".NET",
        icon: "fas fa-cube",
        items: [
          {
            title: "ASP.NET Core",
            items: [
              { title: "Web API Design", path: "/dotnet/web-api" },
              { title: "Middleware Pipeline", path: "/dotnet/middleware" },
              { title: "Authentication & Authorization", path: "/dotnet/auth" },
            ],
          },
          {
            title: "Data Access",
            items: [
              { title: "Entity Framework Core", path: "/dotnet/ef-core" },
              { title: "CQRS Pattern", path: "/dotnet/cqrs" },
              { title: "Repository Pattern", path: "/dotnet/repository" },
            ],
          },
          {
            title: "Architecture",
            items: [
              {
                title: "Clean Architecture",
                path: "/dotnet/clean-architecture",
              },
              { title: "Microservices", path: "/dotnet/microservices" },
              { title: "Domain-Driven Design", path: "/dotnet/ddd" },
            ],
          },
        ],
      },
      {
        title: "Node.js",
        icon: "fab fa-node-js",
        items: [
          {
            title: "Core Concepts",
            items: [
              { title: "Event Loop", path: "/nodejs/event-loop" },
              { title: "Streams & Buffers", path: "/nodejs/streams" },
              { title: "Error Handling", path: "/nodejs/error-handling" },
            ],
          },
          {
            title: "Database Integration",
            items: [
              { title: "Prisma ORM", path: "/nodejs/prisma" },
              { title: "MongoDB", path: "/nodejs/mongodb" },
              { title: "SQL Databases", path: "/nodejs/sql" },
            ],
          },
        ],
      },
      {
        title: "EfCore",
        icon: "fas fa-database",
        items: [
          {
            title: "Basic Questions",
            items: [
              {
                title: "Default lifetime of DbContext in DI?",
                path: "/efcore/basic/dbcontext-lifetime",
              },
              {
                title: "How can you create a database using EF?",
                path: "/efcore/basic/create-database",
              },
              {
                title:
                  "Does EF Core allow creating migrations for multiple databases?",
                path: "/efcore/basic/multiple-database-migrations",
              },
              {
                title: "How can you create multiple new entities in EF?",
                path: "/efcore/basic/create-multiple-entities",
              },
              {
                title: "How can you update an existing entity in EF?",
                path: "/efcore/basic/update-entity",
              },
              {
                title: "How can you delete an existing entity in EF?",
                path: "/efcore/basic/delete-entity",
              },
              {
                title: "How to seed a database with initial data in EF?",
                path: "/efcore/basic/database-seeding",
              },
              {
                title: "How to enable logging of SQL queries generated by EF?",
                path: "/efcore/basic/sql-query-logging",
              },
            ],
          },
          {
            title: "Intermediate Questions",
            items: [
              {
                title: "Explain how EF translates LINQ to SQL commands",
                path: "/efcore/intermediate/linq-to-sql",
              },
              {
                title:
                  "How can you use Scoped DbContext in a Singleton Service?",
                path: "/efcore/intermediate/scoped-dbcontext-singleton",
              },
              {
                title: "Explain how Pooling works in EF",
                path: "/efcore/intermediate/dbcontext-pooling",
              },
              {
                title: "Name 2 ways how to create a Pooled DbContext",
                path: "/efcore/intermediate/pooled-dbcontext",
              },
              {
                title: "When should you use DbContextFactory?",
                path: "/efcore/intermediate/dbcontextfactory",
              },
              {
                title:
                  "How would you execute database migrations on a production db?",
                path: "/efcore/intermediate/production-migrations",
              },
              {
                title: "What are EF Core Interceptors used for?",
                path: "/efcore/intermediate/interceptors",
              },
              {
                title: "How to implement soft deletion in EF?",
                path: "/efcore/intermediate/soft-delete",
              },
              {
                title:
                  "How can you update an existing entity without selecting it from the database?",
                path: "/efcore/intermediate/update-without-select",
              },
              {
                title:
                  "How can you delete an existing entity without selecting it from the database?",
                path: "/efcore/intermediate/delete-without-select",
              },
              {
                title: "How to manually create a database transaction in EF?",
                path: "/efcore/intermediate/manual-transactions",
              },
              {
                title: "Explain different transaction isolation levels",
                path: "/efcore/intermediate/transaction-isolation-levels",
              },
              {
                title: "How to implement Optimistic Locking in EF?",
                path: "/efcore/intermediate/optimistic-locking",
              },
              {
                title: "How to call a database view in EF?",
                path: "/efcore/intermediate/database-view",
              },
              {
                title: "How to call a stored procedure in EF?",
                path: "/efcore/intermediate/stored-procedure",
              },
              {
                title: "How to create a one-to-one relationship in EF?",
                path: "/efcore/intermediate/one-to-one",
              },
              {
                title: "How to create a one-to-many relationship in EF?",
                path: "/efcore/intermediate/one-to-many",
              },
              {
                title: "How to create a many-to-many relationship in EF?",
                path: "/efcore/intermediate/many-to-many",
              },
            ],
          },
          {
            title: "Advanced Questions",
            items: [
              {
                title: "What are Global Query Filters?",
                path: "/efcore/global-query-filters",
              },
              {
                title: "What is AsSplitQuery used for?",
                path: "/efcore/as-split-query",
              },
              {
                title: "What is the purpose of Compiled Queries?",
                path: "/efcore/compiled-queries",
              },
              {
                title: "Can you create Compiled async queries?",
                path: "/efcore/compiled-async-queries",
              },
              {
                title: "How to search data as IgnoreCase in EF?",
                path: "/efcore/ignorecase-search",
              },
              {
                title: "What are JSON columns?",
                path: "/efcore/json-columns",
              },
              {
                title: "How to implement Cascade deletion?",
                path: "/efcore/cascade-delete",
              },
              {
                title: "How can you implement audit trails in EF?",
                path: "/efcore/audit-trails",
              },
              {
                title: "How can you implement multitenancy in EF?",
                path: "/efcore/multitenancy",
              },
              {
                title: "Explain how Eager Loading works",
                path: "/efcore/eager-loading",
              },
              {
                title: "Explain how Explicit and Lazy Loading works",
                path: "/efcore/explicit-lazy-loading",
              },
              {
                title:
                  "Do you need a Repository and Unit Of Work pattern for EF?",
                path: "/efcore/repository-unitofwork",
              },
            ],
          },
        ],
      },
    ],
  },
  {
    title: "DevOps & Deployment",
    icon: "fas fa-cloud",
    items: [
      {
        title: "CI/CD",
        items: [
          { title: "GitHub Actions", path: "/devops/github-actions" },
          { title: "Azure DevOps", path: "/devops/azure-devops" },
          { title: "Docker", path: "/devops/docker" },
        ],
      },
    ],
  },
  {
    title: "Testing",
    icon: "fas fa-vial",
    items: [
      { title: "Unit Testing", path: "/testing/unit-testing" },
      { title: "Integration Testing", path: "/testing/integration-testing" },
      { title: "E2E Testing", path: "/testing/e2e-testing" },
    ],
  },
];
---

<nav class="py-3 lg:py-4">
  {
    menuItems.map((section, index) => (
      <div class="mb-1.5 lg:mb-2">
        <button
          class="w-full flex items-center justify-between px-3 lg:px-4 py-2 text-left text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors duration-200"
          data-section={`section-${index}`}
        >
          <div class="flex items-center">
            <i class={`${section.icon} w-4 lg:w-5 h-4 lg:h-5 mr-2`} />
            <span class="font-medium text-sm lg:text-base">
              {section.title}
            </span>
          </div>
          <i class="fas fa-chevron-down transform transition-transform duration-200 text-sm lg:text-base" />
        </button>

        <div
          class="hidden pl-3 lg:pl-4 mt-1 lg:mt-2 space-y-0.5 lg:space-y-1"
          id={`section-${index}-content`}
        >
          {section.items?.map((item, subIndex) => (
            <>
              {"items" in item ? (
                <div class="mb-1.5 lg:mb-2">
                  <button
                    class="w-full flex items-center justify-between px-3 lg:px-4 py-1.5 lg:py-2 text-left text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors duration-200"
                    data-section={`section-${index}-${subIndex}`}
                  >
                    <div class="flex items-center">
                      {"icon" in item && item.icon && (
                        <i
                          class={`${item.icon} w-3.5 lg:w-4 h-3.5 lg:h-4 mr-2`}
                        />
                      )}
                      <span class="font-medium text-xs lg:text-sm">
                        {item.title}
                      </span>
                    </div>
                    <i class="fas fa-chevron-down transform transition-transform duration-200 text-xs lg:text-sm" />
                  </button>

                  <div
                    class="hidden pl-3 lg:pl-4 mt-1 lg:mt-2 space-y-0.5 lg:space-y-1"
                    id={`section-${index}-${subIndex}-content`}
                  >
                    {item.items?.map((subItem, subSubIndex) => (
                      <>
                        {"items" in subItem ? (
                          <div class="mb-1.5 lg:mb-2">
                            <button
                              class="w-full flex items-center justify-between px-3 lg:px-4 py-1.5 lg:py-2 text-left text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors duration-200"
                              data-section={`section-${index}-${subIndex}-${subSubIndex}`}
                            >
                              <span class="font-medium text-xs lg:text-sm">
                                {subItem.title}
                              </span>
                              <i class="fas fa-chevron-down transform transition-transform duration-200 text-xs lg:text-sm" />
                            </button>

                            <div
                              class="hidden pl-3 lg:pl-4 mt-1 lg:mt-2 space-y-0.5 lg:space-y-1"
                              id={`section-${index}-${subIndex}-${subSubIndex}-content`}
                            >
                              {subItem.items?.map((subSubItem) => (
                                <a
                                  href={subSubItem.path}
                                  class={`block px-3 lg:px-4 py-1.5 lg:py-2 rounded-lg text-xs lg:text-sm transition-colors duration-200 ${
                                    currentPath.includes(subSubItem.path) ||
                                    currentPath === subSubItem.path
                                      ? "text-blue-600 dark:text-blue-500 bg-blue-50 dark:bg-blue-900/20"
                                      : "text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"
                                  }`}
                                >
                                  {subSubItem.title}
                                </a>
                              ))}
                            </div>
                          </div>
                        ) : (
                          <a
                            href={subItem.path}
                            class={`block px-3 lg:px-4 py-1.5 lg:py-2 rounded-lg text-xs lg:text-sm transition-colors duration-200 ${
                              currentPath.includes(subItem.path) ||
                              currentPath === subItem.path
                                ? "text-blue-600 dark:text-blue-500 bg-blue-50 dark:bg-blue-900/20"
                                : "text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"
                            }`}
                          >
                            {subItem.title}
                          </a>
                        )}
                      </>
                    ))}
                  </div>
                </div>
              ) : (
                <a
                  href={item.path}
                  class={`block px-3 lg:px-4 py-1.5 lg:py-2 rounded-lg text-xs lg:text-sm transition-colors duration-200 ${
                    currentPath.includes(item.path) || currentPath === item.path
                      ? "text-blue-600 dark:text-blue-500 bg-blue-50 dark:bg-blue-900/20"
                      : "text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"
                  }`}
                >
                  {item.title}
                </a>
              )}
            </>
          ))}
        </div>
      </div>
    ))
  }
</nav>

<script>
  let sidebarState = new Map();

  // Load saved state from sessionStorage
  const savedState = sessionStorage.getItem("sidebarState");
  if (savedState) {
    sidebarState = new Map(JSON.parse(savedState));
  }

  function initializeSidebar() {
    const currentPath = window.location.pathname;
    const sectionButtons = document.querySelectorAll("[data-section]");

    sectionButtons.forEach((button) => {
      if (button.hasAttribute("data-initialized")) return;
      button.setAttribute("data-initialized", "true");

      const sectionId = button.getAttribute("data-section");
      const content = document.getElementById(`${sectionId}-content`);
      const chevron = button.querySelector(".fa-chevron-down");

      // Restore state or initialize based on current path
      if (sidebarState.has(sectionId)) {
        if (sidebarState.get(sectionId)) {
          content?.classList.remove("hidden");
          chevron?.classList.add("rotate-180");
        }
      } else {
        const hasActiveChild = content?.querySelector(
          `a[href="${currentPath}"]`
        );
        if (hasActiveChild) {
          content?.classList.remove("hidden");
          chevron?.classList.add("rotate-180");
          sidebarState.set(sectionId, true);

          // Expand parent sections
          let parentButton = button.parentElement?.closest("[data-section]");
          while (parentButton) {
            const parentId = parentButton.getAttribute("data-section");
            sidebarState.set(parentId, true);
            const parentContent = document.getElementById(
              `${parentId}-content`
            );
            const parentChevron =
              parentButton.querySelector(".fa-chevron-down");
            parentContent?.classList.remove("hidden");
            parentChevron?.classList.add("rotate-180");
            parentButton =
              parentButton.parentElement?.closest("[data-section]");
          }
        }
      }

      // Add click handler
      button.addEventListener("click", () => {
        const isExpanded = !content?.classList.toggle("hidden");
        chevron?.classList.toggle("rotate-180");
        sidebarState.set(sectionId, isExpanded);
        sessionStorage.setItem(
          "sidebarState",
          JSON.stringify(Array.from(sidebarState.entries()))
        );
      });
    });
  }

  // Initialize immediately
  initializeSidebar();

  // Re-initialize after navigation
  window.addEventListener("popstate", () => {
    setTimeout(initializeSidebar, 0);
  });

  // Handle clicks on links
  document.addEventListener("click", (e) => {
    const link = (e.target as HTMLElement).closest("a");
    if (link && link.href && link.href.startsWith(window.location.origin)) {
      setTimeout(initializeSidebar, 0);
    }
  });
</script>
