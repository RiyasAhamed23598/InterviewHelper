[
  {
    "question": "What are Directives in Angular?",
    "options": {
      "A": "Classes that add behavior to elements in your applications",
      "B": "Functions that manipulate data in your applications",
      "C": "Variables that store data in your applications",
      "D": "Methods that call other functions in your applications"
    },
    "correct_answer": "A"
  },
  {
    "question": "How many types of Directives are there in Angular?",
    "options": {
      "A": "One",
      "B": "Two",
      "C": "Three",
      "D": "Four"
    },
    "correct_answer": "C"
  },
  {
    "question": "What does a Component Directive do in Angular?",
    "options": {
      "A": "Changes the DOM layout by adding/removing elements",
      "B": "Changes the appearance or behavior of an element",
      "C": "Adds behavior to elements with a template",
      "D": "Manipulates data in your applications"
    },
    "correct_answer": "C"
  },
  {
    "question": "What does a Structural Directive do in Angular?",
    "options": {
      "A": "Changes the DOM layout by adding/removing elements",
      "B": "Changes the appearance or behavior of an element",
      "C": "Adds behavior to elements with a template",
      "D": "Manipulates data in your applications"
    },
    "correct_answer": "A"
  },
  {
    "question": "What does an Attribute Directive do in Angular?",
    "options": {
      "A": "Changes the DOM layout by adding/removing elements",
      "B": "Changes the appearance or behavior of an element",
      "C": "Adds behavior to elements with a template",
      "D": "Manipulates data in your applications"
    },
    "correct_answer": "B"
  },
  {
    "question": "How are Custom Directives created in Angular?",
    "options": {
      "A": "Using the @Component decorator",
      "B": "Using the @Directive decorator",
      "C": "Using the @Input decorator",
      "D": "Using the @Output decorator"
    },
    "correct_answer": "B"
  },
  {
    "question": "How do Structural Directives work in Angular?",
    "options": {
      "A": "They manipulate DOM elements using microsyntax (*directive) and work with TemplateRef and ViewContainerRef to add/remove elements",
      "B": "They manipulate DOM elements using ElementRef and HostListener",
      "C": "They manipulate DOM elements using the @Directive decorator",
      "D": "They manipulate DOM elements using the @Component decorator"
    },
    "correct_answer": "A"
  },
  {
    "question": "How can data be shared between directives and components in Angular?",
    "options": {
      "A": "Using Input/Output decorators, services, or by accessing the host component through dependency injection",
      "B": "Using the @Directive decorator",
      "C": "Using the @Component decorator",
      "D": "Using ElementRef and HostListener"
    },
    "correct_answer": "A"
  },
  {
    "question": "What lifecycle hooks are available for directives in Angular?",
    "options": {
      "A": "OnInit, OnDestroy, OnChanges, etc",
      "B": "OnPush, OnDestroy, OnChanges, etc",
      "C": "OnInit, OnDestroy, OnPush, etc",
      "D": "OnInit, OnPush, OnChanges, etc"
    },
    "correct_answer": "A"
  },
  {
    "question": "What's the difference between HostBinding and ElementRef in Angular?",
    "options": {
      "A": "HostBinding provides declarative binding to host element properties, while ElementRef gives direct access to the DOM element",
      "B": "HostBinding gives direct access to the DOM element, while ElementRef provides declarative binding to host element properties",
      "C": "HostBinding and ElementRef both provide declarative binding to host element properties",
      "D": "HostBinding and ElementRef both give direct access to the DOM element"
    },
    "correct_answer": "A"
  }
]