[
  {
    "question": "What is the main difference in setup and configuration between Template-Driven and Reactive Forms?",
    "options": {
      "A": "Template-Driven Forms have a more explicit setup, TypeScript-centric",
      "B": "Reactive Forms have a simpler setup, more HTML-centric",
      "C": "Template-Driven Forms have a simpler setup, more HTML-centric",
      "D": "Both have the same setup and configuration"
    },
    "correct_answer": "C"
  },
  {
    "question": "How are forms built in Template-Driven and Reactive Forms?",
    "options": {
      "A": "Template-Driven: Forms built programmatically in component class",
      "B": "Reactive: Forms built using directives in template",
      "C": "Template-Driven: Forms built using directives in template",
      "D": "Both are built using directives in template"
    },
    "correct_answer": "C"
  },
  {
    "question": "What is the data flow in Template-Driven and Reactive Forms?",
    "options": {
      "A": "Template-Driven: Reactive patterns with observables",
      "B": "Reactive: Two-way binding with [(ngModel)]",
      "C": "Template-Driven: Two-way binding with [(ngModel)]",
      "D": "Both use two-way binding with [(ngModel)]"
    },
    "correct_answer": "C"
  },
  {
    "question": "How is validation done in Template-Driven and Reactive Forms?",
    "options": {
      "A": "Template-Driven: Custom validation functions",
      "B": "Reactive: HTML5 validation attributes",
      "C": "Template-Driven: HTML5 validation attributes",
      "D": "Both use HTML5 validation attributes"
    },
    "correct_answer": "C"
  },
  {
    "question": "Which form is easier to test?",
    "options": {
      "A": "Template-Driven Forms",
      "B": "Reactive Forms",
      "C": "Both are equally easy to test",
      "D": "None of them are easy to test"
    },
    "correct_answer": "B"
  },
  {
    "question": "When should you use Template-Driven Forms?",
    "options": {
      "A": "Complex forms",
      "B": "Dynamic form fields",
      "C": "Simple forms",
      "D": "Unit testing requirements"
    },
    "correct_answer": "C"
  },
  {
    "question": "When should you use Reactive Forms?",
    "options": {
      "A": "Simple forms",
      "B": "Basic validation",
      "C": "Quick to implement",
      "D": "Complex forms"
    },
    "correct_answer": "D"
  },
  {
    "question": "Which form type has better performance with large forms?",
    "options": {
      "A": "Template-Driven Forms",
      "B": "Reactive Forms",
      "C": "Both have the same performance",
      "D": "None of them perform well with large forms"
    },
    "correct_answer": "B"
  },
  {
    "question": "What is a strategy for testing Reactive Forms?",
    "options": {
      "A": "Setting invalid values and checking if the form is valid",
      "B": "Setting valid values and checking if the form is invalid",
      "C": "Setting invalid values and checking if the form is invalid",
      "D": "Setting valid values and checking if the form is valid"
    },
    "correct_answer": "D"
  },
  {
    "question": "What is a best practice for error handling in forms?",
    "options": {
      "A": "Decentralized error messages",
      "B": "Centralized error messages",
      "C": "No error messages",
      "D": "Error messages in a separate file"
    },
    "correct_answer": "B"
  }
]