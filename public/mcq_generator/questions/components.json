[
  {
    "question": "What are Components in Angular?",
    "options": {
      "A": "They are the fundamental building blocks of Angular applications.",
      "B": "They are the fundamental building blocks of React applications.",
      "C": "They are the fundamental building blocks of Vue applications.",
      "D": "They are the fundamental building blocks of Django applications."
    },
    "correct_answer": "A"
  },
  {
    "question": "What does a basic Angular component consist of?",
    "options": {
      "A": "A template (HTML), styles (CSS), and logic (TypeScript)",
      "B": "A template (HTML), styles (CSS), and logic (JavaScript)",
      "C": "A template (HTML), styles (CSS), and logic (Python)",
      "D": "A template (HTML), styles (CSS), and logic (Java)"
    },
    "correct_answer": "A"
  },
  {
    "question": "What is the purpose of the Component Decorator in Angular?",
    "options": {
      "A": "It provides metadata for the component, including its selector, template, styles, and change detection strategy.",
      "B": "It provides metadata for the component, including its selector, template, styles, and lifecycle hooks.",
      "C": "It provides metadata for the component, including its selector, template, styles, and error handling strategy.",
      "D": "It provides metadata for the component, including its selector, template, styles, and data binding strategy."
    },
    "correct_answer": "A"
  },
  {
    "question": "What is the purpose of the ngOnChanges lifecycle hook in Angular?",
    "options": {
      "A": "It is called when input properties change.",
      "B": "It is called once after the first ngOnChanges.",
      "C": "It is called during every change detection run.",
      "D": "It is called before the component is destroyed."
    },
    "correct_answer": "A"
  },
  {
    "question": "How do Angular components communicate with each other?",
    "options": {
      "A": "Through input properties and output events.",
      "B": "Through global variables.",
      "C": "Through local storage.",
      "D": "Through cookies."
    },
    "correct_answer": "A"
  },
  {
    "question": "What is View Encapsulation in Angular?",
    "options": {
      "A": "It is a mechanism to control the scope of CSS styles.",
      "B": "It is a mechanism to control the scope of JavaScript variables.",
      "C": "It is a mechanism to control the scope of HTML templates.",
      "D": "It is a mechanism to control the scope of TypeScript classes."
    },
    "correct_answer": "A"
  },
  {
    "question": "What's the difference between smart and presentational components?",
    "options": {
      "A": "Smart components manage data and business logic, while presentational components focus on UI and receive data via inputs.",
      "B": "Smart components focus on UI and receive data via inputs, while presentational components manage data and business logic.",
      "C": "Smart components manage data and business logic, while presentational components manage UI and send data via outputs.",
      "D": "Smart components manage UI and send data via outputs, while presentational components manage data and business logic."
    },
    "correct_answer": "A"
  },
  {
    "question": "How can you optimize component performance in Angular?",
    "options": {
      "A": "Use OnPush change detection, implement trackBy with ngFor, use pure pipes, and lazy load components when possible.",
      "B": "Use OnPush change detection, implement trackBy with ngFor, use impure pipes, and eager load components when possible.",
      "C": "Use Default change detection, implement trackBy with ngFor, use pure pipes, and lazy load components when possible.",
      "D": "Use Default change detection, implement trackBy with ngFor, use impure pipes, and eager load components when possible."
    },
    "correct_answer": "A"
  },
  {
    "question": "What are content projection and ng-content in Angular?",
    "options": {
      "A": "They allow components to receive and display content from their parent.",
      "B": "They allow components to send and display content to their parent.",
      "C": "They allow components to receive and display content from their child.",
      "D": "They allow components to send and display content to their child."
    },
    "correct_answer": "A"
  },
  {
    "question": "How do you handle errors in Angular components?",
    "options": {
      "A": "Use error boundaries, try-catch blocks, and error handlers.",
      "B": "Use error boundaries, try-finally blocks, and error handlers.",
      "C": "Use error boundaries, try-catch blocks, and exception handlers.",
      "D": "Use error boundaries, try-finally blocks, and exception handlers."
    },
    "correct_answer": "A"
  }
]