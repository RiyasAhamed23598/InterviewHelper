[
  {
    "question": "What are Standalone Components in Angular?",
    "options": {
      "A": "Components that can be used without declaring them in an NgModule",
      "B": "Components that can be used without any dependencies",
      "C": "Components that can be used without any routing",
      "D": "Components that can be used without any testing"
    },
    "correct_answer": "A"
  },
  {
    "question": "Why were Standalone Components introduced in Angular?",
    "options": {
      "A": "To increase boilerplate code",
      "B": "To complicate application architecture",
      "C": "To make dependency management unclear",
      "D": "To reduce boilerplate code, simplify application architecture, make dependency management clearer, and improve tree-shaking"
    },
    "correct_answer": "D"
  },
  {
    "question": "How do you migrate from NgModule-based components to Standalone Components?",
    "options": {
      "A": "Add standalone: true to the component decorator, and import necessary dependencies directly in the component",
      "B": "Remove the component from its NgModule, add standalone: true to the component decorator, and import necessary dependencies directly in the component",
      "C": "Remove the component from its NgModule, and import necessary dependencies directly in the component",
      "D": "Add standalone: true to the component decorator, and remove the component from its NgModule"
    },
    "correct_answer": "B"
  },
  {
    "question": "How do you handle routing with Standalone Components?",
    "options": {
      "A": "By using RouterModule in the imports array of the component",
      "B": "By using RouterModule in the providers array of the component",
      "C": "By using RouterModule in the exports array of the component",
      "D": "By using RouterModule in the declarations array of the component"
    },
    "correct_answer": "A"
  },
  {
    "question": "How do you handle dependency injection with Standalone Components?",
    "options": {
      "A": "By using providers array in the component",
      "B": "By using imports array in the component",
      "C": "By using exports array in the component",
      "D": "By using declarations array in the component"
    },
    "correct_answer": "A"
  },
  {
    "question": "What are the best practices for using Standalone Components?",
    "options": {
      "A": "Ensuring they are self-contained and reusable, directly importing only necessary dependencies, leveraging lazy loading for performance, avoiding unnecessary NgModule usage, and organizing them logically within the project structure for maintainability",
      "B": "Ensuring they are not self-contained and reusable, directly importing only necessary dependencies, leveraging lazy loading for performance, avoiding unnecessary NgModule usage, and organizing them logically within the project structure for maintainability",
      "C": "Ensuring they are self-contained and reusable, indirectly importing only necessary dependencies, leveraging lazy loading for performance, avoiding unnecessary NgModule usage, and organizing them logically within the project structure for maintainability",
      "D": "Ensuring they are self-contained and reusable, directly importing only necessary dependencies, not leveraging lazy loading for performance, avoiding unnecessary NgModule usage, and organizing them logically within the project structure for maintainability"
    },
    "correct_answer": "A"
  },
  {
    "question": "Can Standalone Components and NgModule-based components work together?",
    "options": {
      "A": "No, they cannot be mixed in the same application",
      "B": "Yes, they can be mixed in the same application",
      "C": "Yes, but only if the NgModule-based components are declared before the Standalone Components",
      "D": "Yes, but only if the Standalone Components are declared before the NgModule-based components"
    },
    "correct_answer": "B"
  },
  {
    "question": "How do you handle shared dependencies with Standalone Components?",
    "options": {
      "A": "Use imports array or create shared standalone components",
      "B": "Use providers array or create shared standalone components",
      "C": "Use exports array or create shared standalone components",
      "D": "Use declarations array or create shared standalone components"
    },
    "correct_answer": "A"
  },
  {
    "question": "What are the performance implications of using Standalone Components?",
    "options": {
      "A": "They can degrade performance through better tree-shaking, more granular lazy loading, and reduced bundle size",
      "B": "They can improve performance through better tree-shaking, more granular lazy loading, and reduced bundle size",
      "C": "They can degrade performance through worse tree-shaking, less granular lazy loading, and increased bundle size",
      "D": "They can improve performance through worse tree-shaking, less granular lazy loading, and increased bundle size"
    },
    "correct_answer": "B"
  },
  {
    "question": "How do you test Standalone Components?",
    "options": {
      "A": "Similar to regular components but with a more complex setup",
      "B": "Similar to regular components but with a simpler setup",
      "C": "Different from regular components with a more complex setup",
      "D": "Different from regular components with a simpler setup"
    },
    "correct_answer": "B"
  }
]