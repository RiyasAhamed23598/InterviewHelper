[
  {
    "question": "What are the key strategies for optimizing Angular applications?",
    "options": {
      "A": "Change Detection Optimization, Lazy Loading, Preloading Strategies, Bundle Size Optimization, Caching, Server-Side Rendering (SSR), Memory Management, Network Optimization",
      "B": "Lazy Loading, Preloading Strategies, Bundle Size Optimization, Caching",
      "C": "Change Detection Optimization, Lazy Loading, Preloading Strategies, Bundle Size Optimization",
      "D": "Change Detection Optimization, Lazy Loading, Preloading Strategies, Bundle Size Optimization, Caching, Server-Side Rendering (SSR)"
    },
    "correct_answer": "A"
  },
  {
    "question": "How do you optimize change detection in Angular 17+?",
    "options": {
      "A": "Using Signals for efficient updates, OnPush Change Detection, Manual Change Detection",
      "B": "OnPush Change Detection, Manual Change Detection",
      "C": "Using Signals for efficient updates, OnPush Change Detection",
      "D": "Using Signals for efficient updates, Manual Change Detection"
    },
    "correct_answer": "A"
  },
  {
    "question": "How do you optimize bundle size and loading?",
    "options": {
      "A": "Route-level code splitting, Component-level code splitting, Preloading Strategy, Asset Optimization",
      "B": "Route-level code splitting, Component-level code splitting, Preloading Strategy",
      "C": "Route-level code splitting, Component-level code splitting, Asset Optimization",
      "D": "Route-level code splitting, Component-level code splitting"
    },
    "correct_answer": "A"
  },
  {
    "question": "How do you implement caching and memory management?",
    "options": {
      "A": "HTTP Caching, Memory Management, RxJS Memory Management",
      "B": "HTTP Caching, Memory Management",
      "C": "HTTP Caching, RxJS Memory Management",
      "D": "Memory Management, RxJS Memory Management"
    },
    "correct_answer": "A"
  },
  {
    "question": "What is the purpose of Performance Monitoring in Angular?",
    "options": {
      "A": "To track and report metrics to analytics",
      "B": "To optimize bundle size and loading",
      "C": "To implement caching and memory management",
      "D": "To optimize change detection"
    },
    "correct_answer": "A"
  },
  {
    "question": "What is the purpose of Network Optimization in Angular?",
    "options": {
      "A": "To implement HTTP compression",
      "B": "To optimize bundle size and loading",
      "C": "To implement caching and memory management",
      "D": "To optimize change detection"
    },
    "correct_answer": "A"
  },
  {
    "question": "What is the purpose of Build Optimization in Angular?",
    "options": {
      "A": "To optimize the production configuration",
      "B": "To optimize bundle size and loading",
      "C": "To implement caching and memory management",
      "D": "To optimize change detection"
    },
    "correct_answer": "A"
  },
  {
    "question": "What is the purpose of Memory Leaks Prevention in Angular?",
    "options": {
      "A": "To prevent memory leaks by cleaning up resources when a component is destroyed",
      "B": "To optimize bundle size and loading",
      "C": "To implement caching and memory management",
      "D": "To optimize change detection"
    },
    "correct_answer": "A"
  },
  {
    "question": "What is the purpose of Virtual Scrolling in Angular?",
    "options": {
      "A": "To improve performance by only rendering visible items in a large list",
      "B": "To optimize bundle size and loading",
      "C": "To implement caching and memory management",
      "D": "To optimize change detection"
    },
    "correct_answer": "A"
  },
  {
    "question": "What is the purpose of Web Workers in Angular?",
    "options": {
      "A": "To offload heavy computation to a separate thread",
      "B": "To optimize bundle size and loading",
      "C": "To implement caching and memory management",
      "D": "To optimize change detection"
    },
    "correct_answer": "A"
  }
]