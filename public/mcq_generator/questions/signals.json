[
  {
    "question": "What is a new feature introduced in Angular 16+?",
    "options": {
      "A": "Signals",
      "B": "React",
      "C": "Vue",
      "D": "Ember"
    },
    "correct_answer": "A"
  },
  {
    "question": "What are Signals in Angular?",
    "options": {
      "A": "They are special objects that wrap a value and notify consumers when that value changes.",
      "B": "They are a type of error handling mechanism.",
      "C": "They are a type of data binding.",
      "D": "They are a type of event handling mechanism."
    },
    "correct_answer": "A"
  },
  {
    "question": "What are the benefits of using Signals in Angular?",
    "options": {
      "A": "Fine-grained reactivity, better performance, more predictable data flow, improved developer experience",
      "B": "Improved performance, less memory usage, better error handling",
      "C": "Better performance, improved developer experience, easier debugging",
      "D": "Improved developer experience, easier debugging, better error handling"
    },
    "correct_answer": "A"
  },
  {
    "question": "What is the purpose of the 'computed' function in Angular?",
    "options": {
      "A": "It is used to create a computed signal that depends on another signal.",
      "B": "It is used to compute the sum of two numbers.",
      "C": "It is used to compute the average of an array of numbers.",
      "D": "It is used to compute the square root of a number."
    },
    "correct_answer": "A"
  },
  {
    "question": "What is the purpose of the 'effect' function in Angular?",
    "options": {
      "A": "It is used to handle side effects.",
      "B": "It is used to create a visual effect.",
      "C": "It is used to apply a CSS effect.",
      "D": "It is used to create an audio effect."
    },
    "correct_answer": "A"
  },
  {
    "question": "How do you read a signal value in Angular?",
    "options": {
      "A": "By calling the signal as a function.",
      "B": "By using the 'get' method.",
      "C": "By using the 'read' method.",
      "D": "By using the 'fetch' method."
    },
    "correct_answer": "A"
  },
  {
    "question": "How do you set a new value for a signal in Angular?",
    "options": {
      "A": "By using the 'set' method.",
      "B": "By using the 'put' method.",
      "C": "By using the 'write' method.",
      "D": "By using the 'assign' method."
    },
    "correct_answer": "A"
  },
  {
    "question": "What are computed signals in Angular?",
    "options": {
      "A": "They are read-only signals that automatically update when their dependencies change.",
      "B": "They are signals that can be written to.",
      "C": "They are signals that can be both read from and written to.",
      "D": "They are signals that cannot be read from or written to."
    },
    "correct_answer": "A"
  },
  {
    "question": "What is a best practice when using signals in Angular?",
    "options": {
      "A": "Keep signals granular.",
      "B": "Use large, complex signals.",
      "C": "Avoid using computed signals.",
      "D": "Avoid using effects."
    },
    "correct_answer": "A"
  },
  {
    "question": "What is a key point to remember about signals in Angular?",
    "options": {
      "A": "They provide fine-grained reactivity.",
      "B": "They provide worse performance than traditional change detection.",
      "C": "They are a legacy feature that is no longer used.",
      "D": "They are a type of error handling mechanism."
    },
    "correct_answer": "A"
  }
]