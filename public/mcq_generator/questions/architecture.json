[
  {
    "question": "What is the fundamental building block of Angular applications?",
    "options": {
      "A": "Modules",
      "B": "Services",
      "C": "Components",
      "D": "Templates"
    },
    "correct_answer": "C"
  },
  {
    "question": "What is the purpose of modules in Angular?",
    "options": {
      "A": "To handle API communication",
      "B": "To organize the application into cohesive blocks of functionality",
      "C": "To manage data, state, and business logic",
      "D": "To enable navigation and lazy loading"
    },
    "correct_answer": "B"
  },
  {
    "question": "What does Angular's Dependency Injection (DI) system follow?",
    "options": {
      "A": "The module tree",
      "B": "The service tree",
      "C": "The component tree",
      "D": "The template tree"
    },
    "correct_answer": "C"
  },
  {
    "question": "What does Angular use for change detection?",
    "options": {
      "A": "Bidirectional data flow and Zone.js",
      "B": "Unidirectional data flow and Zone.js",
      "C": "Unidirectional data flow and Node.js",
      "D": "Bidirectional data flow and Node.js"
    },
    "correct_answer": "B"
  },
  {
    "question": "What is the role of services in Angular?",
    "options": {
      "A": "To organize the application into cohesive blocks of functionality",
      "B": "To manage data, state, and business logic",
      "C": "To handle API communication",
      "D": "To enable navigation and lazy loading"
    },
    "correct_answer": "B"
  },
  {
    "question": "What does Angular's router enable?",
    "options": {
      "A": "Navigation and lazy loading",
      "B": "Data management and state",
      "C": "API communication",
      "D": "Component organization"
    },
    "correct_answer": "A"
  },
  {
    "question": "What does Angular's HttpClient handle?",
    "options": {
      "A": "Navigation and lazy loading",
      "B": "Data management and state",
      "C": "API communication",
      "D": "Component organization"
    },
    "correct_answer": "C"
  },
  {
    "question": "What should you emphasize when discussing Angular's architecture in interviews?",
    "options": {
      "A": "Modularity",
      "B": "Performance Considerations",
      "C": "Best Practices",
      "D": "All of the above"
    },
    "correct_answer": "D"
  },
  {
    "question": "What is one of the best practices in Angular's architecture?",
    "options": {
      "A": "Smart vs. Presentational components",
      "B": "Service disorganization",
      "C": "Module disarray",
      "D": "None of the above"
    },
    "correct_answer": "A"
  },
  {
    "question": "What is one of the performance considerations in Angular's architecture?",
    "options": {
      "A": "Change detection strategies",
      "B": "Lazy loading",
      "C": "State management patterns",
      "D": "All of the above"
    },
    "correct_answer": "D"
  }
]